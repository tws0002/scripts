/*
	Modifications: Fix critical Maya bug when the renderView is not displayed properly.
				The getRenderWindowPanel() function is copied from the renderwindowPanel.mel script.
*/

proc string getRenderWindowPanel()
{

	string $renderPanel;
	string $renderPanels[] = `getPanel -scriptType "renderWindowPanel"`;

	if( size($renderPanels) == 0 )
	{
		$renderPanel = `scriptedPanel -type "renderWindowPanel" -unParent`;
		scriptedPanel -e -label `interToUI $renderPanel` $renderPanel;
	}
	else
	{
		$renderPanel = $renderPanels[0];
	}

	return $renderPanel;
}

// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
// Color Management Utilities for render view
//

// Bring in utility methods for non-linear sliders
source colorManagementNonLinearSliderUtilities.mel;

// Saved states of exposure and gamma attributes of the render view
// TODO: Remove these when a generic state toggle solution is found
global int   $rvToggleGamma     = 0;
global int   $rvToggleExposure     = 0;
global float $rvSavedGammaValue = 0.0;
global float $rvSavedExposureValue = 0.0;

// Global variables used to track the render view's gamma and exposure ranges
global float $rvGammaMinRange;
global float $rvGammaMaxRange;
global float $rvExposureMinRange;
global float $rvExposureMaxRange;

//
// Purpose: Resets all toggle states
//
global proc resetRVTogleStates()
{
	resetRVGammaTogleState();
	resetRVExposureTogleState();
}

//
// Purpose: Resets the gamma toggle states
//
global proc resetRVGammaTogleState()
{
	global int $rvToggleGamma;
	$rvToggleGamma = 0;
}

//
// Purpose: Resets the exposure toggle states
//
global proc resetRVExposureTogleState()
{
	global int $rvToggleExposure;
	$rvToggleExposure = 0;
}

//
// Purpose: Updates the gamma controls of the render view
//
global proc updateRenderViewGammaControls(float $value)
{
	floatField -e -value $value gammaRenderViewFieldItem;
	updateRenderViewGammaSlider();
}

//
// Purpose: Updates the exposure controls of the render view
//
global proc updateRenderViewExposureControls(float $value)
{
	floatField -e -value $value exposureRenderViewFieldItem;
	updateRenderViewExposureSlider();
}

//
// Purpose: Resets the render view min/max control ranges
//
global proc resetColorManagementControlRange()
{
	global float $rvGammaMinRange;
	global float $rvGammaMaxRange;
	global float $rvExposureMinRange;
	global float $rvExposureMaxRange;

	$rvGammaMinRange = 0.000001;
	$rvGammaMaxRange = 4.0;
	$rvExposureMinRange =-5.0;
	$rvExposureMaxRange = 5.0;
}

//
// Purpose: Used to toggle the between the current and default of the renderview gamma.
//
global proc toggleRenderViewGamma()
{
	global int   $rvToggleGamma;
	global float $rvSavedGammaValue;
	global float $rvGammaMaxRange;

	float $newGammaValue;

	if($rvToggleGamma == 0)
	{
		// The gamma button is being pressed, we need to set the default value
		// and save the current value
		$newGammaValue = 1.0;
		$rvToggleGamma = 1;
		$rvSavedGammaValue = `floatField -q -value gammaRenderViewFieldItem`;

		// We also need to adjust the ranges
		$rvGammaMaxRange = clamp(4.0, $rvGammaMaxRange, $rvSavedGammaValue);
	}
	else
	{
		// The gamma button was pressed, we need to restore the saved value
		$newGammaValue = $rvSavedGammaValue;
		$rvToggleGamma = 0;
	}

	updateRenderViewGammaControls($newGammaValue);
	updateRenderViewGammaState();
}

//
// Purpose: Used to toggle the between the current and default of the renderview gamma.
//
global proc toggleRenderViewExposure()
{
	global int   $rvToggleExposure;
	global float $rvSavedExposureValue;
	global float $rvExposureMinRange;
	global float $rvExposureMaxRange;

	float $newExposureValue;

	if($rvToggleExposure == 0)
	{
		// The exposure button is being pressed, we need to set the default value
		// and save the current value
		$rvSavedExposureValue = `floatField -q -value exposureRenderViewFieldItem`;
		$newExposureValue = 0.0;
		$rvToggleExposure = 1;

		// We also need to adjust the ranges
		if($rvSavedExposureValue > 0)
		{
			$rvExposureMaxRange = clamp(5.0, $rvExposureMaxRange, $rvSavedExposureValue);
		}
		else
		{
			$rvExposureMinRange = clamp($rvExposureMinRange, -5.0, $rvSavedExposureValue);
		}
	}
	else
	{
		// The exposure button was pressed, we need to restore the saved value
		$newExposureValue = $rvSavedExposureValue;
		$rvToggleExposure = 0;
	}

	updateRenderViewExposureControls($newExposureValue);
	updateRenderViewExposureState();
}

//
// Purpose: Callback used for the exposure update slider.
//
global proc updateRenderViewExposureState()
{
    float $fieldValue = `floatField -q -value "exposureRenderViewFieldItem"`;
//MOD
//    renderWindowEditor -e -exposure $fieldValue "renderView";
	string $renderView = getRenderWindowPanel();
	renderWindowEditor -e -exposure $fieldValue $renderView;
//END
}

//
// Purpose: Callback used for the gamma update slider.
//
global proc updateRenderViewGammaState()
{
    float $fieldValue = `floatField -q -value "gammaRenderViewFieldItem"`;
//MOD
    //renderWindowEditor -e -gamma $fieldValue "renderView";
	string $renderView = getRenderWindowPanel();
	renderWindowEditor -e -exposure $fieldValue $renderView;    
//END	
}

//
// Purpose: Updates the field of the gamma control
//
global proc updateRenderViewGammaField()
{
    if(`floatField -exists gammaRenderViewFieldItem` == 0)
    {
        return;
    }

    global float $rvGammaMinRange;
    global float $rvGammaMaxRange;

    float $linearValue = `floatSlider -q -value gammaRenderViewSliderItem`;
    float $nonLinearValue = getGammaNonLinearFromLinear($linearValue, $rvGammaMaxRange);
    floatField -e -value $nonLinearValue gammaRenderViewFieldItem;

    updateRenderViewGammaState();
}

//
// Purpose: Updates the slider of the gamma control
//
global proc updateRenderViewGammaSlider()
{
    if(`floatSlider -exists gammaRenderViewSliderItem` == 0)
    {
        return;
    }

    global float $rvGammaMaxRange;
    global float $rvGammaMinRange;

    float $fieldValue = `floatField -q -value gammaRenderViewFieldItem`;

    if($fieldValue > $rvGammaMaxRange)
    {
        $rvGammaMaxRange = $fieldValue;
    }
    else
    if($fieldValue < $rvGammaMinRange)
    {
        // Gamma has to be > 0
        $rvGammaMinRange = max($fieldValue, 0.000001);
    }

    float $normalizedValue = getGammaLinearFromNonLinear($fieldValue, $rvGammaMaxRange);
    floatSlider -e -value $normalizedValue gammaRenderViewSliderItem;

    updateRenderViewGammaState();
}

//
// Purpose: Updates the field of the exposure control
//
global proc updateRenderViewExposureField()
{
    if(`floatField -exists exposureRenderViewFieldItem` == 0)
    {
        return;
    }

    global float $rvExposureMinRange;
    global float $rvExposureMaxRange;

    float $linearValue = `floatSlider -q -value exposureRenderViewSliderItem`;
    float $nonLinearValue = getNonLinearFromLinear($linearValue, $rvExposureMinRange, $rvExposureMaxRange);
    floatField -e -value $nonLinearValue exposureRenderViewFieldItem;

    updateRenderViewExposureState();
}

//
// Purpose: Updates the slider of the exposure control
//
global proc updateRenderViewExposureSlider()
{
    if(`floatSlider -exists exposureRenderViewSliderItem` == 0)
    {
        return;
    }

    global float $rvExposureMaxRange;
    global float $rvExposureMinRange;

    float $fieldValue = `floatField -q -value exposureRenderViewFieldItem`;

    if($fieldValue > $rvExposureMaxRange)
    {
        $rvExposureMaxRange = $fieldValue;
    }
    else
    if($fieldValue < $rvExposureMinRange)
    {
        $rvExposureMinRange = $fieldValue;
    }

    float $linearValue = getLinearFromNonLinear($fieldValue, $rvExposureMinRange, $rvExposureMaxRange);
    floatSlider -e -value $linearValue exposureRenderViewSliderItem;

    updateRenderViewExposureState();
}

//
// Purpose: Used to increment/decrement the value of a color management dynamic property
//
global proc incrementDynamicPropertyField(string $nameOfView, string $nameOfProperty, string $nameOfFieldItem, float $deltaValue)
{
    global float $rvGammaMinRange;
    global float $rvGammaMaxRange;
    global float $rvExposureMinRange;
    global float $rvExposureMaxRange;

    if(`floatField -exists $nameOfFieldItem` != 0)
    {
        float $currentValue = `floatField -q -value -value $nameOfFieldItem`;
        float $newValue = $currentValue + $deltaValue;

        if($nameOfProperty == "exposure")
        {
            $rvExposureMinRange = min($rvExposureMinRange, $newValue);
            $rvExposureMaxRange = max($rvExposureMaxRange, $newValue);
         }
        else
        if($nameOfProperty == "gamma")
        {
            $rvGammaMaxRange = max($rvGammaMaxRange, $newValue);
            $newValue = clamp($rvGammaMinRange, $rvGammaMaxRange, $newValue);
        }

        floatField -e -value $newValue $nameOfFieldItem;
        string $cmd = "renderWindowEditor -e -" + $nameOfProperty + " " + $newValue + " " + $nameOfView;
        eval($cmd);
    }
}
